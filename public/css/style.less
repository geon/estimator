
@landing-page-background-color: #001f23;
@project-background-color: #8097AD;

@text-color-dark: #000;
@text-color-light: #fff;

@font-size: 16px;
@line-height: 1.5em;

@task-color-white: #fff;
@task-color-black: #333;
@task-color-blue: #38f;
@task-color-purple: #a29;
@task-color-red: #f45;
@task-color-orange: #f82;
@task-color-yellow: #ff5;
@task-color-green: #6f2;




// Mixins

.return-contrasting-color(@color, @dark: @text-color-dark, @light: @text-color-light) when (luma(@color) > 50%) {
	@contrasting-color: @dark;
}
.return-contrasting-color(@color, @dark: @text-color-dark, @light: @text-color-light) when (luma(@color) =< 50%) {
	@contrasting-color: @light;
}
.contrasting-color(@color, @dark: @text-color-dark, @light: @text-color-light) when (luma(@color) > 50%) {

	color: @dark;
}
.contrasting-color(@color, @dark: @text-color-dark, @light: @text-color-light) when (luma(@color) =< 50%) {

	// Webkit on OS X has a rendering bug, causing light text on dark to be slightly bolder. (Not just the illusion.)
	// https://web.archive.org/web/20131019233655/http://tanookilabs.com/your-fonts-look-bad-in-chrome-heres-the-fix
	-webkit-font-smoothing: antialiased;

	color: @light;
}
.contrasting-color-faded(@color, @amount: 75%, @dark: @text-color-dark, @light: @text-color-light) {

	.contrasting-color(@color, fade(@dark, @amount), fade(@light, @amount));
}
.contrasting-color-mixed(@color, @amount: 75%, @dark: @text-color-dark, @light: @text-color-light) {

	.contrasting-color(@color, mix(@dark, @color, @amount), mix(@light, @color, @amount));
}




@import (css) 'cssreset-min.css';

// Set global font for everything.
* {

	font-family: inherit;
	font-family: inherit;
	letter-spacing: inherit;
}
html {

	font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif, FontAwesome;
	font-size: @font-size;
	letter-spacing: 0.03em; // The font is just a *tiiiny* bit too cramped.

	background: @landing-page-background-color;
}

h1, h2, h3, p, hr {

	margin-top: @line-height;
}

h1 {

	font-size: 1.5em;
}

h2 {

	font-size: 1.25em;
}

h3 {

	font-size: 1em;
	font-weight: bold;
}

h3 + p {

	margin-top: 0;
}

p {

	line-height: @line-height;
}

a {

	// TODO: color
	text-decoration: none;

	&:hover {

		text-decoration: underline;
	}
}

button {

	cursor: pointer;
}




body[data-current-page='landing'] {

	background: @landing-page-background-color url(landing-page-background.jpg);
	background-repeat: no-repeat;
	background-position: center top;	
}

.landing {

	.contrasting-color(@landing-page-background-color);

	// Prevents the margins from collapsing;
	&::before{

		content: ' '; // &nbsp;
		display: block;
		overflow: hidden;
		width: 0;
		height: 0;
	}

	h1, h2, p, a.button {

		font-weight: normal;
		letter-spacing: 1.3;
		line-height: 1.3em;
	}

	p, a.button {

		font-size: 20px;
	}

	h1.logo {

		font-family: Georgia, Times, Times New Roman, serif;
		font-weight: normal;
		text-align: center;

		// @media only screen and (max-width : 959px) {
		// 	font-size: 400px;
		// 	line-height: 200px;
		// 	margin: 50px 0;
		// }

		// @media only screen and (min-width : 960px) {
			font-size: 500px;
			line-height: 300px;
			margin: 150px 0 50px 0;
		// }
	}

	p.tagline {

		text-align: center;
		margin: 0 20px;
	}

	a.button.create {

		width: 150px;
		text-align: center;
		display: block;
		margin: 0 auto;
		font-size: 20px;
		color: white;
		text-decoration: none;
		border: 1px solid;
		border-radius: 10px;
		padding: 10px 20px;
		transition: background .1s;

		&:hover {

			background: rgba(255, 255, 255, .15);
			transition: background .2s;
		}

		// @media only screen and (max-width : 959px) {

		// 	margin: 50px auto 150px auto;
		// }

		// @media only screen and (min-width : 960px) {

			margin: 150px auto;
		// }
	}

	div.columns {

		margin: 0 auto;
		overflow: auto;

		@media only screen and (min-width : 960px) {

			display: flex;
			align-items: flex-start;
			width: 250px * 3 + 50px * 2;
			margin: 0 auto 100px auto;

			> div:last-child {

				margin-right: 0;
			}
		}

		h2 {

			font-size: 20px;
			font-weight: bold;
			text-align: center;
			margin-top: 50px;
		}

		p {

			font-size: 16px;
		}

		img {

			display: block;
			margin: 0 auto;
		}

		> div {

			// @media only screen and (max-width : 959px) {

			// 	margin: 0 20px 120px 20px;
			// }

			// @media only screen and (min-width : 960px) {

				width: 250px;
				margin: 0;
				margin-right: 50px;
			// }
		}
	}
}








body[data-current-page='project'] {

	background-size: 50px 50px;
	background-color: @project-background-color;
	@stripe-color: desaturate(darken(@project-background-color, 3%), 0%);
	background-image: linear-gradient(-45deg,
		@stripe-color 25%,
		transparent 25%,
		transparent 50%,
		@stripe-color 50%,
		@stripe-color 75%,
		transparent 75%
	);
}

.project {

	padding: 50px;

	.contrasting-color(@project-background-color);

	input.title {

		font-size: 2em;

		background: transparent;
		color: @text-color-light;

		border-radius: 3px;
		border: 1px solid transparent;

		padding: 8px;
		margin-left: -11px;

		&:focus {

			// Disable the default focus-style.
			outline: none;

			border-color: inherit;
		}
	}

	> p.estimate {

		margin-top: 0;
		margin-bottom: 2em;

		color: @text-color-light;
	}

	.tree-view {

		@task-width: 200px;
		@task-margin: 16px;
		@task-radius: 5px;

		margin-top: 2em;

		ul {

			margin: 0;
			padding: 0;
			list-style: none;

			li {

				min-height: 30px;

				margin: 0;
				padding: 0;

				display: flex;
				align-items: stretch;

				&.insert.after {

					margin-bottom: 10px;
				}

				> div.task {

					cursor: move;

					display: inline-block;

					width: @task-width;

					// box-sizing: border-box;
					// padding: 10px;
					
					margin: 0 @task-margin @task-margin 0;
					border-radius: @task-radius;

					@title-margin-h: 14px;
					@title-margin-v: 10px;

					h1, input {

						cursor: text;

						font-size: 1.25em;

						padding: @title-margin-h/2 - 1px @title-margin-v/2 - 1px;
						margin: @title-margin-h/2 @title-margin-v/2;
					}

					h1 {

						border: 1px solid transparent;
					}

					div.description {

						font-size: 14px;

						margin: @title-margin-h @title-margin-v;
						margin-top: 0;
					}

					input {

						display: none;

						width: calc(~"100% -" @title-margin-v);

						background: transparent;
						color: inherit;

						border-radius: 3px;
						border: 1px solid;

						// Disable the default focus-style.
						&:focus {

							outline: none;
						}
					}

					&.editing-title h1 {

						display: none;
					}
					&.editing-title input {

						display: block;
					}

					// Estimates + buttons
					@bottom-row-height: 30px;
					@bottom-row-bottom-margin: 8px - 2px; // 2px: Task box shadow.
					padding-bottom: @bottom-row-height + @bottom-row-bottom-margin;
					.bottom-row {

						height: @bottom-row-height;
						width: 100%;
						position: absolute;
						bottom: @bottom-row-bottom-margin;

						> .durations {

							margin: 0 10px;

							> p {

								margin: 0;
								line-height: @bottom-row-height;
							}

							> ::before {

								margin-right: 5px;
							}

							.estimate::before {

								// fa-dot-circle-o
								content: '\f192';
							}

							.projection::before {

								// fa-arrow-circle-right
								content: '\f0a9';
							}

							.actual::before {

								// fa-check-circle
								content: '\f058';
							}
						}

						// Buttons
						button {

							display: block;
							font-size: @bottom-row-height;
							line-height: @bottom-row-height;
							float: right;

							padding: 0;
							border: none;
							color: inherit;
							background: transparent;

							display: inline;

							&::before {

								margin: 0;
								display: inline;
							}
						}
						.add-sub-task {

							&::before {

								// fa-plus-square
								content: '\f0fe';
							}

							margin-right: 10px;
						}
						.task-details {

							&::before {

								// fa-pencil-square
								content: '\f14b';
							}

							margin-right: 5px;
						}
					}


					// Colors
					.task-color (@color) {

						.set-colors (@color, @title-fade, @description-fade) {

							.contrasting-color-faded(@color, @title-fade);
							background: @color; // url(noise-5percent.png);

							// background-image: linear-gradient(to bottom, @color 0%, darken(@color, 2%) 100%);
							box-shadow: 0px 2px 0px 0px darken(desaturate(@color, 30%), 10%);

							// Make the description text less prominent, except for links.
							div.description {

								.contrasting-color-faded(@color, @description-fade);

								a {
									.contrasting-color(@color);
									text-decoration: none;
								}
							}

							.bottom-row {

								button {

									transition: opacity .2s;

									&:not(:hover) {

										opacity: .3;
										transition: opacity .1s;
									}
								}
							}
						}

						&:not(.done) {

							.set-colors (@color, 100%, 75%);
						}

						&.done {

							opacity: .5;
							.set-colors (lighten(desaturate(@color, 10%), 25%), 40%, 30%);
						}
					}
					// Use a default color, or they will fade in from transparent when they are created. :-/.
					.task-color(@task-color-white);
					&[data-color='black'] {
						.task-color(@task-color-black);
					}
					&[data-color='blue'] {
						.task-color(@task-color-blue);
					}
					&[data-color='purple'] {
						.task-color(@task-color-purple);
					}
					&[data-color='red'] {
						.task-color(@task-color-red);
					}
					&[data-color='orange'] {
						.task-color(@task-color-orange);
					}
					&[data-color='yellow'] {
						.task-color(@task-color-yellow);
					}
					&[data-color='green'] {
						.task-color(@task-color-green);
					}
					@fade-time: .3s;
					transition: color @fade-time, background-color @fade-time, box-shadow @fade-time;


					// Drop targets
					position: relative;
					>.drop-target {

						position: absolute;

						width: @task-width;

						&.before {

							top: -@task-margin/2;
							bottom: 50%;
						}
						&.after {

							top: 50%;
							bottom: -@task-margin/2;
						}
						&.child {

							// Set it up to cover the entire area where a child
							// would go, but show it only for leaf nodes.

							display: none;

							width: (@task-margin + @task-width);
							right: -(@task-margin + @task-width);

							top: -@task-margin/2;
							bottom: -@task-margin/2;

							// Make hovering not show the task buttons.
							pointer-events: none;
						}
					}
				}

				&.leaf > .task > .drop-target.child {

					display: block;
				}
			}
		}

		// Make the drop targets only show up while dragging.
		// (Leaf nodes child-targets are still visible, but they don't overlap the task.)
		.drop-target {

			display: none;
		}
		&.dragging .drop-target {

			display: block;
		}

		> button.add-sub-task {

			display: block;
			height: 52px;
			width: @task-width;

			font-size: 1.25em;

			@letterpress-amount: 10%;

			& when (luma(@project-background-color) > 50%) {

				text-shadow: 0 -1px 0 darken(@project-background-color, @letterpress-amount);
			}
			& when (luma(@project-background-color) <= 50%) {

				text-shadow: 0 1px 0 lighten(@project-background-color, @letterpress-amount);
			}

			color: @text-color-light;
			// -webkit-font-smoothing: antialiased;
			background: transparent;
			border-radius: @task-radius;
			border: 3px dotted;
		}
	}
}


// Modal
body {

	#modal-overlay {

		display: none;

		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;

		background:rgba(255, 255, 255, .5) url('noise-3percent.png');


		// Flexbox stuff to center `.dialog`.
		align-items: center;
		justify-content: center;

		.dialog {

			margin: 0 auto;

			background: white;

			padding: 30px;
			border-radius: 10px;
			box-shadow: 0px 2px 20px 0px rgba(0, 0, 0, .2);
		}
	}

	&.modal-overlay {

		#page {

			// Just eyekandy. IE support doesn't matter.
			-webkit-filter: blur(5px);
			        filter: blur(5px);
		}

		#modal-overlay {

			display: flex;
		}
	}
}



.dialog.edit-task {

	width: 400px;

	input.title {

		font-size: 1.25em;
		width: 100%;
	}

	.estimates {

		margin: 20px 0 0 0;

		display: flex;
		align-items: center;
		flex-direction: column;

		label {

			width: 280px;
			text-align: right;

			font-size: 14px;

			input {

				width: 130px;
				margin-left: 20px;
			}
		}
	}

	.done {

		font-size: 14px;

		display: block;
		text-align: center;

		margin-top: 20px;
	}

	textarea {

		margin: 20px 0;
		padding: 10px;

		font-size: 14px;

		width: 100%;
		height: 100px;
		resize: none;

		&:focus {

			resize: vertical;
		}
	}

	input.title, .estimates input, textarea {

		background: transparent;
		color: inherit;

		border-radius: 3px;
		border: 1px solid transparent;

		&:focus {

			// Disable the default focus-style.
			outline: none;

			border-color: inherit;
		}
	}

	.estimates input, textarea {

		font-size: 14px;
	}

	.colors {

		margin: 20px 0;

		display: flex;
		justify-content: center;

		label {

			@size: 16px;
			@selected-size: 24px;

			// Make it large.
			width: @selected-size;
			height: @selected-size;

			margin: 0;

			input {

				// Hide the default widget.
				// Opacity makes it tabbable & arrowable.
				opacity: 0;
				width: 0;
				height: 0;
				margin: 0;
			}

			// Colors
			.task-color (@color) {

				span {

					cursor: pointer;

					content: '';
					display: block;
					background: @color;

					width: @size;
					height: @size;
					border-radius: @size/2;
					margin: (@selected-size - @size)/2;

					transition: transform .2s;

					// Add extra contrast around bleak colors.
					& when (luma(@color) > 50%) {

						box-shadow: inset 0px 0px 2px 0px darken(desaturate(@color, 20%), 20%);
					}
				}

				// The sibling selector lets me apply a :checked style to a
				// completely separate element where I control the content.
				// Much more flexible than input::before.
				// Thanks, Heydon! http://www.sitepoint.com/replacing-radio-buttons-without-replacing-radio-buttons/
				span:hover {

					transform: scale(unit((@selected-size+@size)/2/@size));
					transition: transform .1s;
				}
				input:checked + span {

					transform: scale(unit(@selected-size/@size));
				}
			}
			&.white {
				.task-color(@task-color-white);
			}
			&.black {
				.task-color(@task-color-black);
			}
			&.blue {
				.task-color(@task-color-blue);
			}
			&.purple {
				.task-color(@task-color-purple);
			}
			&.red {
				.task-color(@task-color-red);
			}
			&.orange {
				.task-color(@task-color-orange);
			}
			&.yellow {
				.task-color(@task-color-yellow);
			}
			&.green {
				.task-color(@task-color-green);
			}
		}
	}

	.bottom-buttons {

		button {

			margin: 0 auto;
			display: block;

			font-size: 1.25em;
			font-weight: bold;

			border-radius: 5px;
			padding: 6px 20px;
			border: none;

			.color (@color) {

				@bulge: 6%;
				@letterpress-amount: 10%;

				& when (luma(@color) > 50%) {

					text-shadow: 0 1px 0 lighten(@color, @letterpress-amount);
					box-shadow: inset 0px 0px 2px 0px darken(@color, @letterpress-amount);
				}
				& when (luma(@color) <= 50%) {

					text-shadow: 0 -1px 0 darken(@color, @letterpress-amount);
				}
				.contrasting-color(@color);
				background: @color linear-gradient(to top, darken(@color, @bulge), @color, lighten(@color, @bulge));

				&:active {

					background: @color;
				}

				&:focus {

					outline: none;
				}
			}

			&.delete {

				.color (#f31);

				float: left;
			}

			&.save {

				.color (#f8f8f8);

				float: right;
			}
		}
	}

	position: relative;
	i.close {

		position: absolute;
		right: 10px;
		top: 10px;
		font-size: 22px;

		color: #ccc;
		transition: color 0.1s;
		&:hover {

			color: #aaa;
			transition: color 0.2s;
		}
	}
}
